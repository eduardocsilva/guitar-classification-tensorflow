{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","height","maxWidth","marginBottom","padding","media","App","classes","guitarModels","loadModel","url","a","setModel","tf","console","log","getClassification","preprocesedImg","preprocess","document","querySelector","model","predict","data","predictions","normalizedPredictions","sortedPredictions","Array","from","map","p","i","probability","className","sort","b","predictedClass","setClassification","setProbability","Math","round","img","fromPixels","resizeNearestNeighbor","toFloat","expandDims","useState","classification","image","setImage","imageSelected","setImageSelected","useEffect","then","id","Card","CardMedia","title","src","alt","onLoad","hidden","CardContent","Typography","gutterBottom","variant","component","color","Button","type","onChange","event","URL","createObjectURL","target","files","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a214d1ee.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Card, CardActionArea, CardActions, CardContent, CardMedia, Typography } from \"@material-ui/core\"\n\nconst useStyles = makeStyles({\n    root: {\n        width: 400,\n        height: 435,\n        maxWidth: \"90vw\",\n        marginBottom: 30,\n        padding: 10\n    },\n    media: {\n        height: 350\n    }\n});\n\nfunction App() {\n    const classes = useStyles();\n    const modelUrl = \"../../ml_model/model.json\";\n    const guitarModels = [\n        \"Fender Jaguar\",\n        \"Fender Jazzmaster\",\n        \"Fender Mustang\",\n        \"Fender Stratocaster\",\n        \"Fender Telecaster\",\n        \"Gibson ES\",\n        \"Gibson Flying V\",\n        \"Gibson SG\",\n        \"Gibson Explorer\",\n        \"Gibson Firebird\",\n        \"Gibson Les Paul\"\n    ]\n\n    const loadModel = async (url: string) => {\n        try {\n            setModel(await tf.loadGraphModel(url));\n        } catch (e) {\n            console.log(\"An error occured:\", e)\n        }\n    }\n\n    const getClassification = async () => {\n        const preprocesedImg = preprocess(document.querySelector(\"#selectedImage\") as HTMLImageElement)\n        const predictions = await model.predict(preprocesedImg).data();\n        const normalizedPredictions = await tf.softmax(predictions).data();\n\n        let sortedPredictions = Array.from(normalizedPredictions)\n            .map(function (p: any, i: any) {\n                return {\n                    probability: p,\n                    className: guitarModels[i]\n                };\n            }).sort(function (a: any, b: any) {\n                return b.probability - a.probability;\n            });\n\n        const predictedClass = sortedPredictions[0];\n        setClassification(predictedClass.className)\n        setProbability(Math.round(predictedClass.probability * 10000) / 100)\n    }\n\n    const preprocess = (img: HTMLImageElement) => {\n        return tf.browser.fromPixels(img)\n            .resizeNearestNeighbor([180, 180])\n            .toFloat()\n            .expandDims();\n    }\n\n    const changeHandler = (event: any) => {\n        setImage(URL.createObjectURL(event.target.files[0]));\n        setImageSelected(true);\n    };\n\n    // Hooks\n    const [model, setModel] = useState<any>();\n    const [classification, setClassification] = useState<any>();\n    const [probability, setProbability] = useState<any>();\n    const [image, setImage] = useState<any>();\n    const [imageSelected, setImageSelected] = useState<any>(false);\n\n    useEffect(() => {\n        tf.ready().then(() => {\n            loadModel(modelUrl);\n        });\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div id=\"title\">\n                    <h3>Guitar Classification</h3>\n                    <h6>(powered by Tensorflow.js)</h6>\n                </div>\n                {\n                    imageSelected ? (\n                        <Card id=\"prediction\" className={classes.root}>\n                            <CardMedia\n                                className={classes.media}\n                                image={image}\n                                title=\"Guitar\"\n                            />\n                            <img src={image} alt=\"\" id=\"selectedImage\" onLoad={getClassification} hidden />\n                            {\n                                (model && imageSelected) ? (\n                                    <CardContent>\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                            {classification}\n                                        </Typography>\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                            With {probability}% of confidence\n                                        </Typography>\n                                    </CardContent>\n                                ) : (\n                                    <CardContent>\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                            Waiting for the classification...\n                                        </Typography>\n                                    </CardContent>\n                                )\n                            }\n                        </Card>\n                    ) : null\n                }\n                <Button\n                    id=\"upload-image-btn\"\n                    variant=\"contained\"\n                    component=\"label\"\n                    color=\"secondary\"\n                >\n                    {!imageSelected ? \"Upload an image to classify\" : \"Upload another image\"}\n                    <input\n                        type=\"file\"\n                        onChange={changeHandler}\n                        hidden\n                    />\n                </Button>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}